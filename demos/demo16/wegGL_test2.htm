
<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - geometry hierarchy</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				background:#fff;
				padding:0;
				margin:0;
				font-weight: bold;
				overflow:hidden;
			}
		</style>
	</head>
	<body>

		<script src="js/three.min.js"></script>
		<script src="js/stats.min.js"></script>

		<script>

		/*

		IcosahedronGeometry
				
		http://www56.atwiki.jp/threejs/pages/45.html
		http://threejs.org/
		http://demo.bkcore.com/threejs/webgl_tron_iso.html
		https://github.com/mrdoob/three.js/blob/master/examples/webgl_geometry_colors.html
		http://threejsdoc.appspot.com/doc/three.js/src.source/extras/geometries/IcosahedronGeometry.js.html
		https://code.google.com/p/flozjs/source/browse/trunk/hello_webgl/docs/source+threejs/extras/geometries/IcosahedronGeometry.js?spec=svn5&r=5
		http://jabtunes.com/labs/3d/three.js/report/files/src_extras_geometries_IcosahedronGeometry_js/index.html

		https://github.com/mrdoob/three.js/
		http://stemkoski.github.io/Three.js/


		*/

			var container, stats;

			var camera, scene, renderer;

			var geometry, group, meshIco;
			var objects = [];
			var particles = []; 

			var mouseX = 0, mouseY = 0;

			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;

			document.addEventListener( 'mousemove', onDocumentMouseMove, false );

			init();
			animate();

			function init() {

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 10000 );
				camera.position.z = 500;

				scene = new THREE.Scene();
				//scene.fog = new THREE.Fog( 0xffffff, 1, 10000 );

				scene.fog = new THREE.FogExp2( 0x071E30, 0.00022 );
				scene.fog = new THREE.Fog( 0x071E30, 1000, 10000 );
				scene.fog.color.setHSL( 0.51, 0.5, 0.9 );

				hemiLight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 1 );
				hemiLight.color.setHSL( 0.6, 0.75, 1 );
				hemiLight.groundColor.setHSL( 0.295, 0.5, 1 );
				hemiLight.position.set( 0, 500, 0 );
				scene.add( hemiLight );


				/*groupIco = new THREE.Object3D();
				var icosa = new THREE.Mesh(
				  new THREE.IcosahedronGeometry( 40,1 ), //
				  new THREE.MeshLambertMaterial( { color: 0x00ff00 } )
				);
				
				groupIco.add( icosa );
				scene.add( groupIco );*/


				//////////////////////////////////////////////////////////////////////
				//
				// Sphere
				//
				//////////////////////////////////////////////////////////////////////

				//var geometry = new THREE.CubeGeometry( 100, 100, 100 );
				var geometry = new THREE.IcosahedronGeometry( 50, 1 );
				
				var material = new THREE.MeshNormalMaterial(
				{
					shininess: 69, ambient: 0xFFFFFF, color: 0x071E30, wireframe: false, overdraw: true
				});

					/*var material = new THREE.MeshLambertMaterial({ 
						shininess: 69, ambient: 0xFFFFFF, color: 0x071E30, wireframe: false, overdraw: true
						//shininess: 98, ambient: 0xffffff, color: 0x071E30, overdraw: true
						//map: THREE.ImageUtils.loadTexture( 'textures/cube/skybox/nx2.jpg' ) 
					})*/

					/*new THREE.MeshPhongMaterial({ 
						shininess: 9, ambient: 0xFFFFFF, color: 0xFF9966, wireframe: false, overdraw: true
						//map: THREE.ImageUtils.loadTexture( 'textures/cube/skybox/nx2.jpg' ) 
					})*/

					/*new THREE.MeshLambertMaterial({ 
						shininess: 58, ambient: 0xffffff, color: 0x071E30,  overdraw: true
						//map: THREE.ImageUtils.loadTexture( 'textures/cube/skybox/nx2.jpg' ) 
					})*/




				group = new THREE.Object3D();

				for ( var i = 0; i < 10; i ++ ) {

					var meshIco = new THREE.Mesh( geometry, material );
					
					
					meshIco.position.x = Math.random() * 2000 - 1000;
					meshIco.position.y = Math.random() * 2000 - 1000;
					meshIco.position.z = Math.random() * 2000 - 1000;

					meshIco.rotation.x = Math.random() * 2 * Math.PI;
					meshIco.rotation.y = Math.random() * 2 * Math.PI;

					meshIco.matrixAutoUpdate = false;
					meshIco.updateMatrix();

					group.add( meshIco );
					//particles.push(meshIco);
					objects.push( meshIco );


				}

				scene.add( group );








				//renderer = new THREE.WebGLRenderer();

				renderer = new THREE.WebGLRenderer(
				{
					antialias: true,
					 alpha: false, 
					//canvas: document.createElement( 'canvas' ),
					clearColor: 0x000000,
					//clearAlpha: 1,
					//maxLights: 8,
					//stencil: false,
					preserveDrawingBuffer: false
				});








				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.sortObjects = false;

				container.appendChild( renderer.domElement );

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				stats.domElement.style.zIndex = 100;
				container.appendChild( stats.domElement );

			//

			window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function onDocumentMouseMove(event) {

				mouseX = ( event.clientX - windowHalfX ) * 10;
				mouseY = ( event.clientY - windowHalfY ) * 10;

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				var time = Date.now() * 0.001;

				var rx = Math.sin( time * 0.7 ) * 0.5,
					ry = Math.sin( time * 0.3 ) * 0.5,
					rz = Math.sin( time * 0.2 ) * 0.5;

				//camera.position.x += ( mouseX - camera.position.x ) * .05;
				//camera.position.y += ( - mouseY - camera.position.y ) * .05;

				camera.lookAt( scene.position );

				group.rotation.x = rx;
				group.rotation.y = ry;
				group.rotation.z = rz;

				//var time = Date.now() * 0.001;
				//objects[0].rotation.x = time * 0.25;
				//objects[0].rotation.z = time * 0.5;
				//r += 0.003;


				for(var i = 0; i < objects.length; i++)
				{

					var object = objects[i]; 
					//particle.updatePhysics(); 
					
					/*with(particle.position)
					{
						if(y<-1000) y+=2000; 
						if(x>1000) x-=2000; 
						else if(x<-1000) x+=2000; 
						if(z>1000) z-=2000; 
						else if(z<-1000) z+=2000; 
					}*/

					/*particle.rotation += Math.random() * 0.01 * (parseInt(Math.random()*2) - 1 | 1);
					particle.rotation += Math.random() * 0.01 * (parseInt(Math.random()*2) - 1 | 1);
					particle.rotation += Math.random() * 0.01 * (parseInt(Math.random()*2) - 1 | 1);

					particle.position.x = Math.random() * 666 * (parseInt(Math.random()*2) - 1 | 1);
					particle.position.y = Math.random() * 666 * (parseInt(Math.random()*2) - 1 | 1);
					particle.position.z = Math.random() * 666 * (parseInt(Math.random()*2) - 1 | 1);*/

					// give it a random x and y position between -500 and 500
					/*particle.position.x = Math.random() * 1500 - 400;
					particle.position.y = Math.random() * 1500 - 400;
			 		particle.position.z = Math.random() * 1500 - 800;*/
			 
					// scale it up a bit

					//object.rotation.y = time * 0.25;
					//object.rotation.x = time * 0.5;
					
					//object.scale.x = object.scale.y = object.scale.z =  0.2 * (parseInt(Math.random()*3));
					

				}

				renderer.render( scene, camera );






				

			}

		</script>

	</body>
</html>
