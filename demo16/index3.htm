<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - geometry - particles</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body { color: #fff; font-family:Monospace; font-size:13px; text-align:center; margin: 0px; overflow: hidden; }
			#info { position: absolute; top: 0px; width: 100%; padding: 5px; }
			a { color: #0080ff; }
			/*canvas { border: 1px solid red; }*/

		</style>
	</head>
	<body>
	
		<div id="info">
			<a href="http://threejs.org" target="_blank">three.js webgl - geometry - particles</a>
		</div>

		<div id="container"></div>
		<!-- <canvas name="content1"></canvas> -->
		<!-- <canvas name="content2"></canvas> -->
	
		<script src="js/three.min.js"></script>
		<script src="js/jquery_1.js"></script>

		<!--
		<script src="http://threejs.org/examples/js/shaders/CopyShader.js"></script>
		<script src="http://threejs.org/examples/js/shaders/DotScreenShader.js"></script>
		<script src="http://threejs.org/examples/js/shaders/RGBShiftShader.js"></script>

		<script src="http://threejs.org/examples/js/postprocessing/EffectComposer.js"></script>
		<script src="http://threejs.org/examples/js/postprocessing/RenderPass.js"></script>
		<script src="http://threejs.org/examples/js/postprocessing/MaskPass.js"></script>
		<script src="http://threejs.org/examples/js/postprocessing/ShaderPass.js"></script>
	-->


		<script src="js/Detector.js"></script>
		<script src="js/stats.min.js"></script>

		<script>

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var SaveAsWEbGL = 0;
			var SaveAsVideo = 0;

			var composer;
			var object, light;

			var radius = 560, theta = 0;
			var container, stats;

			var camera, scene, renderer, objects;
			var particleLight, pointLight;

			var container, interval, camera, scene, renderer;
			var projector, plane, cube, linesMaterial;

			var color = 0,colors = [ 0xDF1F1F, 0xDFAF1F, 0x80DF1F, 0x1FDF50, 0x1FDFDF, 0x1F4FDF, 0x7F1FDF, 0xDF1FAF, 0xEFEFEF, 0x303030 ];
			var brush, objectHovered, mouse3D, isMouseDown = false;
			var radious = 1600, theta = 45, onMouseDownTheta = 45, phi = 60, onMouseDownPhi = 60, isShiftDown = false;

			var onMouseDownPosition = new Object;
			var ray = new Object;

			var texture_placeholder,
			isUserInteracting = false,
			onMouseDownMouseX = 0, onMouseDownMouseY = 0,
			lon = 90, onMouseDownLon = 0,
			lat = 0, onMouseDownLat = 0,
			phi = 0, theta = 0,
			target = new THREE.Vector3();

			//var windowHalfX = 510; // 
			//var windowHalfY = 288; // 

			var windowHalfX = 1280; // 
			var windowHalfY = 720; // 

			//var windowHalfX = 720; // 
			//var windowHalfY = 480; // 

			var windowHalfX = window.innerWidth ;
			var windowHalfY = window.innerHeight ;

			var container, stats;
			var camera, scene, renderer;
			var mesh, group1, group2, group3, light;
			var mouseX = 0, mouseY = 0;
			
			//var windowHalfX = window.innerWidth / 2;
			//var windowHalfY = window.innerHeight / 2;

			init();
			animate();

			function init() {

				//container = document.getElementById( 'container' );
				container = document.createElement('div');
				document.body.appendChild(container);

		



				//camera = new THREE.OrthographicCamera( window.innerWidth / - 2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / - 2, 4, 11000 );
				/*camera = new THREE.PerspectiveCamera( 54, window.innerWidth / window.innerHeight, 20, 4000 );
				camera.position.z = 880;
				scene = new THREE.Scene();
				scene.fog = new THREE.Fog( 0x050505, 2000, 3500 );*/

				//camera = new THREE.OrthographicCamera( window.innerWidth / - 2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / - 2, 100, 5100 );
				//camera = new THREE.PerspectiveCamera( 47, windowHalfX / windowHalfY, 1, 4500 );
				//camera.position.z = 5;

				camera = new THREE.PerspectiveCamera(55, windowHalfX / windowHalfY, 1, 3300 );
				camera.position.y = 300;
				camera.position.z = 1100;

				scene = new THREE.Scene();
				//scene.fog = new THREE.Fog( 0xfffff, 320, 3350 );
				//scene.fog = new THREE.Fog( 0x111111, 100, 4000 );
				//scene.fog = new THREE.FogExp2( 0x000000, 0.0008 );
				
				
				//scene.fog = new THREE.Fog( 0x000000, 100, 2000 );

				scene.fog = new THREE.FogExp2( 0x071E30, 0.00022 );
				scene.fog = new THREE.Fog( 0x071E30, 1000, 10000 );
				//scene.fog.color.setHSV( 0.51, 0.5, 0.9 );

				//object = new THREE.Object3D();
				//scene.add( object );

				/*
				*
				*
				*
				*
				*
				*
				*
				*/

				scene.add( new THREE.AmbientLight( 0x111111 ) );

				var light1 = new THREE.DirectionalLight( 0xffffff, 0.5 );
				light1.position.set( 1, 1, 1 );
				scene.add( light1 );

				/*var light2 = new THREE.DirectionalLight( 0xffffff, 0.5 );
				light2.position.set( 0, -1, 0 );
				scene.add( light2 );*/

				/*
				*
				*
				*
				*
				*
				*
				*
				*/

				//////////////////////////////////////////////////////////////////////
				//
				// settings
				//
				//////////////////////////////////////////////////////////////////////

				/*var canvas = document.createElement( 'canvas' );
				canvas.width = 128;
				canvas.height = 128;

				var context = canvas.getContext( '2d' );
				var gradient = context.createRadialGradient( canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width / 2 );*/

				areaLight1 = new THREE.AreaLight( 0xffffff, 1 );
				areaLight1.position.set( 0.0001, 10.0001, -18.5001 );
				areaLight1.rotation.set( -0.74719, 0.0001, 0.0001 );
				areaLight1.width = 10;
				areaLight1.height = 1;
				scene.add( areaLight1 );

				/*
				*
				*
				*
				*
				*
				*
				*
				*/

				/////////////////////////////////////////////
				// lights
				/////////////////////////////////////////////

				light = new THREE.DirectionalLight( 0xffffff );
				light.position.set( 100, 551, 22 );
				scene.add( light );

				light = new THREE.DirectionalLight( 0xffffff );
				light.position.set( -110, -100, -100 );
				scene.add( light );

				light = new THREE.AmbientLight( 0x111111 );
				scene.add( light );

				////////////////////////////////////////////
				// PROJECTOR
				////////////////////////////////////////////

				projector = new THREE.Projector();
				group = new THREE.Object3D();//create an empty container

				/*
				*
				*
				*
				*
				*
				*
				*
				*/
				
				// ------------------------------------------------
				// Panorama landscape
				// ------------------------------------------------
				
				var materials = [
					loadTexture( 'textures/cube/skybox/nx.jpg' ), // right
					loadTexture( 'textures/cube/skybox/nx.jpg' ), // left
					loadTexture( 'textures/cube/skybox/nx.jpg' ), // top
					loadTexture( 'textures/cube/skybox/nx.jpg' ), // bottom
					loadTexture( 'textures/cube/skybox/nx.jpg' ), // back
					loadTexture( 'textures/cube/skybox/nx.jpg' )  // front
				];

				mesh = new THREE.Mesh( new THREE.SphereGeometry( 2321, 310, 1 ), new THREE.MeshDepthMaterial({overdraw: true}) );
				mesh.scale.x = -1;
				scene.add( mesh );

				/*
				*
				*
				*
				*
				*
				*
				*
				*/
				
				// white spotlight shining from the side, casting shadow

				var spotLight = new THREE.SpotLight( 0xffffff );
				spotLight.position.set( 100, 1000, 100 );
				spotLight.castShadow = true;
				spotLight.shadowMapWidth = 1024;
				spotLight.shadowMapHeight = 1024;
				spotLight.shadowCameraNear = 500;
				spotLight.shadowCameraFar = 4000;
				spotLight.shadowCameraFov = 30;
				scene.add( spotLight );

				var light = new THREE.PointLight( 0xff0000, 1, 100 );
				light.position.set( 50, 50, 50 );
				scene.add( light );
				
				
				
				//var geometry = new THREE.IcosahedronGeometry( 10, 0 );
				//var geometry = new THREE.OctahedronGeometry( 10, 0 );
				//var geometry = new THREE.TetrahedronGeometry( 10, 0 );
								
				//////////////////////////////////////////////////////////////////////
				//
				// Spheres
				//
				//////////////////////////////////////////////////////////////////////

				var faceIndices = [ 'a', 'b', 'c', 'd' ];
				var color, f, f2, f3, p, n, vertexIndex,
					radius = 70,
					geometry  = new THREE.OctahedronGeometry( radius, 1 ),
					geometry2 = new THREE.OctahedronGeometry( radius, 2 ),
					geometry3 = new THREE.OctahedronGeometry( radius, 3 );

				for ( var i = 0; i < geometry.faces.length; i ++ ) {

					f  = geometry.faces[ i ];
					f2 = geometry2.faces[ i ];
					f3 = geometry3.faces[ i ];

					n = ( f instanceof THREE.Face3 ) ? 3 : 4;

					for( var j = 0; j < n; j++ ) {
						vertexIndex = f[ faceIndices[ j ] ];
						p = geometry.vertices[ vertexIndex ];

						color = new THREE.Color( 0xffffff );
						//color.setHSL( 0.5, ( p.y / radius + 1 ) / 2, 0.4 );
						//color.setHSL( 0.0, ( p.y / radius + 1 ) / 2, 0.5 );
						//color.setHSL( ( p.y / radius + 1 ) / 2, 1.0, 0.5 );
						color.setHSL( 0.125 * vertexIndex/geometry.vertices.length, 1.0, 0.5 );
						f.vertexColors[ j ] = color;
						
						color = new THREE.Color( 0xffffff );
						//color.setHSL( 0.5, ( p.y / radius + 1 ) / 2, 0.4 );
						color.setHSL( 0.125 * vertexIndex/geometry.vertices.length, 1.0, 0.5 );
						f2.vertexColors[ j ] = color;

						color = new THREE.Color( 0xffffff );
						//color.setHSL( 0.5, ( p.y / radius + 1 ) / 2, 0.4 );
						color.setHSL( 0.125 * vertexIndex/geometry.vertices.length, 1.0, 0.5 );
						f3.vertexColors[ j ] = color;
					}
				}

				/*
				MeshLambertMaterial
				MeshBasicMaterial
				*/

				var materials = [
					new THREE.MeshLambertMaterial( { color: 0x999999, shading: THREE.FlatShading, vertexColors: THREE.VertexColors, wireframe: false, transparent: false } ),
					new THREE.MeshLambertMaterial( { color: 0x999999, shading: THREE.FlatShading, vertexColors: THREE.VertexColors, wireframe: false, transparent: false } )
				];

				group1 = THREE.SceneUtils.createMultiMaterialObject( geometry, materials );
				group1.position.x = -400;
				group1.position.y = -140;
				group1.rotation.x = -1.87;
				scene.add( group1 );

				group2 = THREE.SceneUtils.createMultiMaterialObject( geometry, materials );
				group2.position.x = 400;
				group2.position.y = -40;
				group2.rotation.x = 0;
				scene.add( group2 );

				group3 = THREE.SceneUtils.createMultiMaterialObject( geometry, materials );
				group3.position.x = 330;
				group3.rotation.x = 330;
				scene.add( group3 );

				group4 = THREE.SceneUtils.createMultiMaterialObject( geometry, materials );
				group4.position.x = 40;
				group4.position.y = 140;
				group4.rotation.x = 10;
				scene.add( group4 );

				group5 = THREE.SceneUtils.createMultiMaterialObject( geometry, materials );
				group5.position.x = -340;
				group5.position.y = -340;
				group5.rotation.x = -310;
				scene.add( group5 );

				group6 = THREE.SceneUtils.createMultiMaterialObject( geometry, materials );
				group6.position.x = -10;
				group6.position.y = 210;
				group6.position.z = -210;
				group6.scale.x = 2;
				group6.scale.y = 2;
				group6.scale.z = 2;
				scene.add( group6 );

				/*
				*
				*
				*
				*
				*
				*
				*
				*/

				// http://www.icoachmath.com/math_dictionary/icosahedron.html
				// http://stemkoski.github.io/Three.js/Shapes.html

				//////////////////////////////////////////////////////////////////////
				//
				// Particles
				//
				//////////////////////////////////////////////////////////////////////

				//var geometry = new THREE.CubeGeometry( 4, 4, 4 );
				//var geometry = new THREE.IcosahedronGeometry( 10, 0 );
				//var geometry = new THREE.OctahedronGeometry( 10, 0 );
				var geometry = new THREE.TetrahedronGeometry( 10, 0 );

				for ( var i = 0; i < 200; i ++ ) {

					var object = new THREE.Mesh( geometry, 
					//new THREE.MeshLambertMaterial( { color: Math.random() * 0xffffff } )
					//new THREE.MeshLambertMaterial( { color: 0xffffff } )
					//new THREE.MeshPhongMaterial( { ambient: 0x050505, color: 0x000000, specular: 0x555555, shininess: 30 } ) 
					new THREE.MeshPhongMaterial( { ambient: 0x030303, color: Math.random() * 0xffffff, specular: 0x333333, shininess: 10, shading: THREE.FlatShading, wireframe: false, transparent: false } ) 
					);

					object.position.x = Math.random() * 800 - 400;
					object.position.y = Math.random() * 800 - 400;
					object.position.z = Math.random() * 800 - 400;

					object.rotation.x = Math.random() * 2 * Math.PI;
					object.rotation.y = Math.random() * 2 * Math.PI;
					object.rotation.z = Math.random() * 2 * Math.PI;

					object.scale.x = Math.random() + 0.5;
					object.scale.y = Math.random() + 0.5;
					object.scale.z = Math.random() + 0.5;

					scene.add( object );

				}

				//////////////////////////////////////////////////////////////////////
				//
				// Particles
				//
				//////////////////////////////////////////////////////////////////////

				//var geometry = new THREE.CubeGeometry( 4, 4, 4 );
				//var geometry = new THREE.IcosahedronGeometry( 10, 0 );
				//var geometry = new THREE.OctahedronGeometry( 10, 0 );
				var geometry = new THREE.TetrahedronGeometry( 10, 0 );

				for ( var i = 0; i < 100; i ++ ) {

					var object = new THREE.Mesh( geometry, 
					//new THREE.MeshLambertMaterial( { color: Math.random() * 0xffffff } )
					//new THREE.MeshLambertMaterial( { color: 0xffffff } )
					//new THREE.MeshPhongMaterial( { ambient: 0x050505, color: 0x000000, specular: 0x555555, shininess: 30 } ) 
					new THREE.MeshPhongMaterial( { ambient: 0x030303, color: Math.random() * 0xffffff, specular: 0x333333, shininess: 10, shading: THREE.FlatShading, wireframe: false, transparent: false } ) 
					);

					object.position.x = Math.random() * 800 - 400;
					object.position.y = Math.random() * 800 - 400;
					object.position.z = Math.random() * 800 - 400;

					object.rotation.x = Math.random() * 2 * Math.PI;
					object.rotation.y = Math.random() * 2 * Math.PI;
					object.rotation.z = Math.random() * 2 * Math.PI;

					object.scale.x = Math.random() + 0.5;
					object.scale.y = Math.random() + 0.5;
					object.scale.z = Math.random() + 0.5;

					scene.add( object );

				}


							/////////////////////////////////////////////
				// world
				/////////////////////////////////////////////

				//var cube = new THREE.CubeGeometry( 10, 10, 20 );
				//var cube = new THREE.SphereGeometry( 3, 3, 80 );
				var cube = new THREE.IcosahedronGeometry( 4, 0 );
				var material =  new THREE.MeshLambertMaterial( {  color: 0xff0000 } );

				for( var i = 0; i < 110; i ++ ) {

					var mesh = new THREE.Mesh( cube, material );
					mesh.position.set(( Math.random() - 0.5 ) * 700,
									  ( Math.random() - 0.5 ) * 100,
									  ( Math.random() - 0.5 ) * 400 );

					mesh.updateMatrix();
					mesh.matrixAutoUpdate = false;
					scene.add( object );

				}

				//projector = new THREE.Projector();
				//raycaster = new THREE.Raycaster();

				/*
				*
				*
				*
				*
				*
				*
				*
				*/

				///////////////////////////////////////////
				// RENDERER WebGLRenderer CanvasRenderer
				///////////////////////////////////////////

				if( (navigator.userAgent.match(/Chrome/i)) ) {
					//renderer = new THREE.CanvasRenderer( {antialias:true} );
					//renderer = new THREE.WebGLRenderer( {antialias:true} );
					//renderer = new THREE.WebGLRenderer({ preserveDrawingBuffer: true, antialias:true });

					renderer = new THREE.WebGLRenderer({
						antialias: false,
						clearColor: 0x000000,
						clearAlpha: 0,
						alpha: true,
						preserveDrawingBuffer: true 
						/*****
						preserveDrawingBuffer to allow screenshot
						*****/
					});


				}
				else{
					//renderer = new THREE.WebGLRenderer( {antialias:true} );
					renderer = new THREE.WebGLRenderer({ preserveDrawingBuffer: true, antialias:true });
					//renderer = new THREE.CanvasRenderer( {antialias:true} );
				}

				//renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setSize( windowHalfX, windowHalfY );
				container.appendChild( renderer.domElement );


				// postprocessing

				/*composer = new THREE.EffectComposer( renderer );
				composer.addPass( new THREE.RenderPass( scene, camera ) );

				var effect = new THREE.ShaderPass( THREE.DotScreenShader );
				effect.uniforms[ 'scale' ].value = 8;
				composer.addPass( effect );

				var effect = new THREE.ShaderPass( THREE.RGBShiftShader );
				effect.uniforms[ 'amount' ].value = 0.0015;
				effect.renderToScreen = true;
				composer.addPass( effect );*/

				/*
				*
				*
				*
				*
				*
				*
				*
				*/

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				container.appendChild( stats.domElement );

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {
				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
			}

			function onDocumentMouseMove( event ) {

				/*
				mouseX = ( event.clientX - windowHalfX );
				mouseY = ( event.clientY - windowHalfY );*/

			}

			//

			/*function animate() {
				requestAnimationFrame( animate );
				render();
				stats.update();
			}

			function render() {
				camera.position.x += ( mouseX - camera.position.x ) * 0.05;
				camera.position.y += ( - mouseY - camera.position.y ) * 0.05;
				camera.lookAt( scene.position );
				renderer.render( scene, camera );
			}*/


		//


			function loadTexture( path ) {
				var texture = new THREE.Texture( texture_placeholder );
				var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: true } );
				var image = new Image();
				image.onload = function () {
					texture.needsUpdate = true;
					material.map.image = this;
					render();
				};
				image.src = path;
				return material;

			}


	////////////////////////////////////////////////////////////////////////
			//
			// LOADIMAGE
			//
			////////////////////////////////////////////////////////////////////////

			function loadImage( path ) {
				var image = document.createElement( 'img' );
				var texture = new THREE.Texture( image, THREE.UVMapping )
				image.onload = function () { texture.needsUpdate = true; };
				image.src = path;
				return texture;

			}

			function animate() {
				requestAnimationFrame( animate );
				render();
				stats.update();
			}

			var r = 0;

			function render() {


				theta += 0.49;

				camera.position.x = radius * Math.sin( THREE.Math.degToRad( theta ) );
				camera.position.y = radius * Math.sin( THREE.Math.degToRad( theta ) );
				camera.position.z = radius * Math.cos( THREE.Math.degToRad( theta ) );

				//camera.position.x += ( mouseX - camera.position.x ) * .05;
				//camera.position.y += ( - mouseY - camera.position.y ) * .05;
				camera.lookAt( scene.position );

				// find intersections

				//var vector = new THREE.Vector3( mouse.x, mouse.y, 1 );
				//projector.unprojectVector( vector, camera );

				//raycaster.set( camera.position, vector.sub( camera.position ).normalize() );


				//http://threejs.org/docs/#Reference/Extras.Geometries/PolyhedronGeometry
				// http://threejs.org/examples/#webgl_postprocessing
				// http://threejs.org/examples/webgl_postprocessing.html
				// http://i.ytimg.com/vi/19RnkADIkBc/maxresdefault.jpg
				// http://i.ytimg.com/vi/-c5Evu8zlOI/maxresdefault.jpg

				/*
				----------------------------------

http://i.ytimg.com/vi/-c5Evu8zlOI/0.jpg
http://i.ytimg.com/vi/19RnkADIkBc/0.jpg
http://i.ytimg.com/vi/19RnkADIkBc/1.jpg
http://i.ytimg.com/vi/-c5Evu8zlOI/maxresdefault.jpg



http://i2.ytimg.com/vi/mRH0RnkrAyQ/mqdefault.jpg
http://i2.ytimg.com/vi/MnjMJBrxcAg/mqdefault.jpg
http://i2.ytimg.com/vi/yjyHbKM64pY/mqdefault.jpg
http://i2.ytimg.com/vi/4cdP651og8o/mqdefault.jpg
http://i2.ytimg.com/vi/VVoiG8LEQ8c/mqdefault.jpg
http://i2.ytimg.com/vi/19RnkADIkBc/mqdefault.jpg

-----

http://www.youtube.com/watch?v=-c5Evu8zlOI

				*/
		

				group3.position.x = 500 * Math.cos( r );
				group3.position.z = 500 * Math.sin( r );

				group2.position.x = -150 * Math.cos( r );
				group2.position.z = -150 * Math.sin( r );

				group1.position.x = 300 * Math.cos( r );
				group1.position.z = 300 * Math.sin( r );

				group4.position.x = -200 * Math.cos( r );
				group4.position.z = -200 * Math.sin( r );

				group5.position.x = 200 * Math.cos( r );
				group5.position.z = 200 * Math.sin( r );

				group6.position.x = 60 * Math.cos( r );
				group6.position.z = 400 * Math.sin( r );

				areaLight1.position.x = -300 * Math.cos( r );
				areaLight1.position.z = 600 * Math.sin( r );

				



				var time = Date.now() * 0.002;

				group1.rotation.x = time * 0.25;
				group1.rotation.z = time * 0.5;

				group3.rotation.x = time * 0.25;
				group3.rotation.y = time * 0.5;

				group2.rotation.z = time * 0.25;
				group2.rotation.y = time * 0.5;

				group4.rotation.z = time * 0.25;
				group4.rotation.y = time * 0.5;

				group5.rotation.z = time * 0.25;
				group5.rotation.y = time * 0.5;
				
				group6.rotation.z = time * 0.45;
				group6.rotation.y = time * 0.4;

				areaLight1.rotation.z = time * 0.25;
				areaLight1.rotation.y = time * 0.5;

			



				r += 0.003;

				renderer.render( scene, camera );
				renderer.domElement.toDataURL();

				/*if ( render_canvas ) canvasRenderer.render( scene, camera );
				if ( render_gl && has_gl ) webglRenderer.render( scene, camera );*/
		



			}







		if(SaveAsVideo){

			////////////////////////////////////////////////////////////////////////////
			//
			// Record
			//
			////////////////////////////////////////////////////////////////////////////

			//var windowHalfX = 510; // 
			//var windowHalfY = 288; // 

			//var windowHalfX = 1280; // 
			//var windowHalfY = 720; // 

			//var windowHalfX = 720; // 
			//var windowHalfY = 480; // 

			var canvas_draw = $('#canvas-draw-fancy');
			canvas_draw.width = windowHalfX;
			canvas_draw.height = windowHalfY;
			var canvas_draw = $('canvas')[1].getContext('2d');

			draw_interval = setInterval(function() { // setInterval setTimeout

				if(SaveAsWEbGL){

					////////////////////////////////////////////////////////////////
					//
					// Export Image From WebGL
					// http://jsfiddle.net/TxcTr/3/
					//
					////////////////////////////////////////////////////////////////

					var imgData, img;
					//Listen to 'P' key
					//if(e.which !== 80) return;  
					try {
						imgData = renderer.domElement.toDataURL();      
						//console.log(imgData);
					} 
					catch(e) {
						//console.log("Browser does not support taking screenshot of 3d context");
						return;
					}
					img = document.createElement("img");
					img.src = imgData;
					//document.body.appendChild(imgNode);

				}
				else{

					////////////////////////////////////////////////////////////////
					//
					// Export Image From Canvas
					//
					////////////////////////////////////////////////////////////////

					// import the image from the video
					canvas_draw.drawImage(renderer.domElement, 0, 0, 320, 240);

					// export the image from the canvas
					var img = new Image();
					img.src = $("canvas")[0].toDataURL('image/png');
					img.width = 320;
				
				}

				// set image data to php
				var ajax = new XMLHttpRequest();
				ajax.open("POST",'makefile.php',false);
				ajax.setRequestHeader('Content-Type', 'application/upload');
				ajax.send(img.src); 
				
				// print screens on same page if necesary
				//document.body.appendChild(img);


			}, 30)

		}

		</script>


	</body>
</html>
